@model Tienda.Models.ProductDetailsViewModel
@{
    ViewBag.Title = "Detalles";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h2>Detalle</h2>
    <div class="row mb-5">
        <!-- Columna izquierda para la imagen -->
        <div class="col-md-6 img-zoom-container">
            <img src="@Model.Product.Imagen" alt="@Model.Product.Nombre" class="img-fluid img-zoom">
        </div>


        <!-- Columna derecha para el texto -->
        <div class="col-md-6">
            <h2 class="font-weight-bold">@Model.Product.Nombre</h2>
            <p class="font-italic">Eligue el tamaño.</p>
            @if (Model.Product.ManejaTamano == 1)
            {
                <div class="price-options">
                    @foreach (var tamano in Model.Product.TamañosDisponibles)
                    {
                        <div class="price-circle" data-product-id="@Model.Product.Id" data-tamano-id="@tamano.IdTamano" onclick="selectTamano(@Model.Product.Id, @tamano.IdTamano, event)">
                            <span class="size">@tamano.Descripcion</span>
                            <span class="price">@tamano.Precio.ToString("C")</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="price-default">
                    <div class="price-circle">
                        <span class="price">@Model.Product.Precio.ToString("C")</span>
                    </div>
                </div>
            }
            <p>@Model.Product.Detalle</p>
            <p>@Model.Product.Descripcion</p>
            <p class="font-italic">Nota: no se hacen devoluciones de dinero.</p>
            <p>Estimado cliente, agradecemos tu compra. Por favor ten en cuenta que los pedidos realizados después de las 5:00 PM serán procesados el día hábil siguiente, en orden de llegada. Nos esforzamos por atender tu pedido lo más pronto posible y agradecemos tu comprensión.</p>
            <div class="input-group mb-3">
                <input type="number" class="form-control" id="product-quantity" value="1" min="1" style="max-width: 70px; margin-right: 10px;">
                <div class="input-group-append">
                    <button class="btn bg-rosado add-to-cart" data-product-id="@Model.Product.Id">Añadir al carrito</button>
                    <button class="btn bg-rosado buy-now" data-product-id="@Model.Product.Id">Comprar</button>
                </div>
            </div>
            <span class="confirmation d-none" id="confirmation-@Model.Product.Id">
                ✓
                <br>
                <span class="text-danger">El producto se agregó al carrito</span>
                <br>
                <a href="@Url.Action("Carrito", "Home")">Ver carrito</a>
            </span>
            <div class="input-group mb-3">
                <p>Categoria: <span class="text-danger">@Model.Product.GrupoNombre</span></p>
            </div>
        </div>

    </div>
    <div class="col-12">
        <h1 class="border-bottom">Descripción</h1>
        <p>@Model.Product.Descripcion</p>
        <p class="font-italic">Nota: no se hacen devoluciones de dinero.</p>
        <p>Estimado cliente, agradecemos tu compra. Por favor ten en cuenta que los pedidos realizados después de las 5:00 PM serán procesados el día hábil siguiente, en orden de llegada. Nos esforzamos por atender tu pedido lo más pronto posible y agradecemos tu comprensión.</p>
        <h3 class="text-center">Conoce nuestras restricciones</h3>
        <ul>
            <li>Política de Devolución: Después de realizado el pago no se realizan devoluciones, se puede reprogramar para una fecha no superior a 30 días. </li>
            <li>Términos de Pago: Aceptamos pagos mediante tarjeta de crédito, PayPal, y otros métodos seguros. Todos los pagos deben realizarse antes del envío de los productos.</li>
            <li>Límites de Compra: Se establece un límite de compra de 20 cajas de mini donas por transacción. Esto asegura la disponibilidad del producto para todos nuestros clientes.</li>
            <li>Normativas Alimentarias: Cumplimos con las normativas locales de seguridad alimentaria y garantizamos la calidad e higiene de nuestros productos.</li>
            <li>Envío: el costo del envío pueden variar según la ubicación del cliente. Nos esforzamos por entregar en el plazo establecido.</li>
        </ul>
    </div>
    <div class="col-12">
        <h2 class="border-bottom mb-4">Productos relacionados</h2>
        <div class="row mb-4">
            @foreach (var relatedProduct in Model.RelatedProducts)
            {
                <div class="col-md-4 mb-2">
                    <div class="card product-card narrow-card">
                        <!-- Envuelve solo la imagen y el título en enlaces -->
                        <a href="@Url.Action("Details", new { id = relatedProduct.Id })" class="text-decoration-none">
                            <img src="@relatedProduct.Imagen" class="card-img-top" alt="@relatedProduct.Nombre">
                        </a>
                        <div class="card-body">
                            <a href="@Url.Action("Details", new { id = relatedProduct.Id })" class="text-decoration-none text-success">
                                <h5 class="card-title custom-color">@relatedProduct.Nombre</h5>
                            </a>
                            @if (relatedProduct.ManejaTamano == 1)
                            {
                                <div class="price-options">
                                    @foreach (var tamano in relatedProduct.TamañosDisponibles)
                                    {
                                        <div class="price-circle" data-product-id="@relatedProduct.Id" data-tamano-id="@tamano.IdTamano">
                                            <span class="size">@tamano.Descripcion</span>
                                            <span class="price">@tamano.Precio.ToString("C")</span>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {

                                <div class="price-default">
                                    <div class="price-circle">
                                        <span class="price">@relatedProduct.Precio.ToString("C")</span>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <button class="btn bg-rosado buy-now" data-product-id="@relatedProduct.Id">Comprar</button>
                            <button class="btn bg-rosado add-to-cart" data-product-id="@relatedProduct.Id">Añadir al carrito</button>
                            <span class="confirmation d-none" id="confirmation-@relatedProduct.Id">
                                ✓
                                <br>
                                <span class="text-danger">El producto se agregó al carrito</span>
                                <br>
                                <a href="@Url.Action("Carrito", "Home")">Ver carrito</a>
                            </span>
                        </div>
                    </div>
                </div>

            }
        </div>
    </div>
</div>
<script>
    function updateQuantity(amount) {
        var quantityInput = document.getElementById('product-quantity');
        var newQuantity = parseInt(quantityInput.value) + amount;
        if (newQuantity < 1) {
            newQuantity = 1;  // Asegura que la cantidad sea al menos 1
        }
        quantityInput.value = newQuantity;
    }

    // Asegurando que la cantidad seleccionada se envíe al servidor
    document.querySelectorAll('.add-to-cart').forEach(button => {
        button.addEventListener('click', function () {
            var productId = this.getAttribute('data-product-id');
            var quantity = document.getElementById('product-quantity').value;
            fetch('/Home/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId: productId, quantity: quantity })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Actualizar el mensaje de confirmación
                        document.getElementById('confirmation-' + productId).classList.remove('d-none');

                        // Actualizar el contador del carrito
                        updateCartItemCount();
                    }
                });
        });
    });


    function updateCartItemCount() {
        fetch('/Home/GetCartItemCount')
            .then(response => response.json())
            .then(data => {
                var cartItemCount = data.itemCount;
                var cartCounterElement = document.querySelector('.cart-item-count');
                if (cartCounterElement) {
                    cartCounterElement.textContent = cartItemCount;
                } else {
                    // Crear el contador si no existe
                    var cartLink = document.querySelector('a[href$="/Carrito/Home"]');
                    if (cartLink) {
                        var span = document.createElement('span');
                        span.className = 'badge bg-danger cart-item-count';
                        span.textContent = cartItemCount;
                        cartLink.appendChild(span);
                    }
                }
            });
    }


    function buyNow(productId) {
        var quantity = document.getElementById('product-quantity').value;
        fetch('/Home/AddToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId: productId, quantity: quantity })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Redirigir al carrito de compras si la operación fue exitosa
                window.location.href = '@Url.Action("Carrito", "Home")';
            }
        });
    }

    // Evento de clic para botón de Comprar
    document.querySelectorAll('.buy-now').forEach(button => {
        button.addEventListener('click', function () {
            var productId = this.getAttribute('data-product-id');
            buyNow(productId);
        });
    });
</script>

<style>
    .narrow-card {
        max-width: 330px;
    }

    .btn.bg-rosado {
        background-color: rgb(252, 186, 255); /* Color rosado */
        color: #000000; /* Color negro para el texto de los botones */
    }

    .custom-color {
        color: rgb(255, 25, 84); /* Color personalizado para el nombre */
    }

    .black-text {
        color: #000000; /* Color negro para la descripción */
    }

    .card.product-card {
        box-shadow: 0 4px 8px 0 rgb(0,0,0,0.2); /* Sombreado */
        transition: 0.4s; /* Transición suave */
        width: 85%; /* Hacer la tarjeta más delgada */
        margin: auto; /* Centrar la tarjeta en el espacio de la columna */
    }

        .card.product-card:hover {
            box-shadow: 0 8px 16px 0 rgba(128, 27, 131); /* Sombreado más pronunciado al pasar el ratón */
        }

    .price-options {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px; /* Espacio entre los círculos */
    }

    .price-circle {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 90px; /* Tamaño del círculo */
        height: 90px;
        border: 3px solid pink; /* Color del borde */
        border-radius: 50%; /* Redondear bordes para crear un círculo */
        padding: 3px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.5); /* Sombra opcional */
    }

        .price-circle .size {
            font-weight: bold;
            color: #555; /* Color del texto de tamaño */
            font-size: 12px;
        }

        .price-circle .price {
            color: #d33; /* Color del precio */
            font-weight: bold;
            font-size: 12px;
        }

        .price-circle.selected {
            background-color: #E4B9E3; /* O cualquier color que indique selección */
            /* Otros estilos para el círculo seleccionado */
        }

    .price-default {
        display: flex;
        justify-content:left;
        align-items: flex-start;
        height: 100px; /* Ajusta esto según sea necesario */
    }

    .img-zoom-container {
        overflow: hidden; /* Evita que la imagen salga del contenedor */
    }

    .img-zoom {
        transition: transform 0.5s ease; /* Transición suave para el efecto de zoom */
        width: 100%; /* Asegúrate de que la imagen se ajuste al contenedor */
        height: auto; /* Mantiene la relación de aspecto de la imagen */
    }

        .img-zoom:hover {
            transform: scale(1.2); /* Aumenta el tamaño de la imagen al pasar el mouse */
        }

</style>


